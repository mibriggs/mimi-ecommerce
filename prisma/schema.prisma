// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Required for Next Auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification-tokens")
}

model User {
  // id          String     @id @default(cuid())
  // email       String     @unique
  // isAdmin     Boolean    @default(false)
  // orders      Delivery[]
  // firstName   String?
  // lastName    String?
  // phoneNumber String?
  // accounts    Account[]
  // sessions    Session[]

  id            String     @id @default(cuid())
  email         String?    @unique
  isAdmin       Boolean    @default(false)
  name          String?
  firstName     String?
  lastName      String?
  phoneNumber   String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  orders        Delivery[]

  @@map("users")
}

model Product {
  id            String     @id @default(cuid())
  quantity      Int        @default(0)
  princeInCents Int        @default(0)
  deliveries    Delivery[]
  name          String
  description   String?
  imageLink     String?

  @@map("products")
}

model Delivery {
  id              String    @id @default(cuid())
  status          Status    @default(PENDING)
  buyer           User      @relation(fields: [buyerId], references: [id])
  products        Product[]
  deliveryAddress String
  itemCount       Int
  buyerId         String
  orderedAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("deliveries")
}

enum Status {
  PENDING
  SHIPPED
  TRANSIT
  DELIVERED
}
